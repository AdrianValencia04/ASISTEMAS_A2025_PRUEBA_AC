
import pandas as pd
import streamlit as st
from io import BytesIO

st.set_page_config(page_title="CAAT 2 ‚Äì Auditor√≠a de Privilegios de Usuario", layout="wide")

st.title("üîê CAAT 2 ‚Äì Auditor√≠a de Privilegios de Usuario (Roles Cr√≠ticos)")

st.markdown("""
Esta herramienta analiza los privilegios asignados a cada usuario para detectar accesos conflictivos,
como tener permisos en **Compras** y **Tesorer√≠a** simult√°neamente.
""")

# Subir archivo
uploaded_file = st.file_uploader("üìÇ Cargar archivo Excel/CSV con datos de usuarios y roles", type=["xlsx", "csv"])

if uploaded_file is not None:
    if uploaded_file.name.endswith(".csv"):
        df = pd.read_csv(uploaded_file, encoding="utf-8")
    else:
        df = pd.read_excel(uploaded_file)
    
    st.subheader("üìÑ Vista previa de datos")
    st.dataframe(df.head(), use_container_width=True)

    # Validaci√≥n de conflictos
    usuarios_modulos = df.groupby('Usuario')['M√≥dulo'].apply(set).reset_index()
    usuarios_modulos['Tiene_Conflicto'] = usuarios_modulos['M√≥dulo'].apply(
        lambda x: 'Compras' in x and 'Tesorer√≠a' in x
    )

    conflictos = usuarios_modulos[usuarios_modulos['Tiene_Conflicto']]
    df_conflictos = df[df['Usuario'].isin(conflictos['Usuario'])].copy()

    # KPIs
    total_usuarios = df['Usuario'].nunique()
    total_conflictos = conflictos.shape[0]
    porcentaje_conflictos = (total_conflictos / total_usuarios) * 100

    col1, col2, col3 = st.columns(3)
    col1.metric("Total usuarios", total_usuarios)
    col2.metric("Usuarios con conflicto", total_conflictos)
    col3.metric("% con conflicto", f"{porcentaje_conflictos:.1f}%")

    # Detalle de usuarios con conflicto
    st.subheader("üö® Usuarios con Accesos Conflictivos")
    st.dataframe(df_conflictos, use_container_width=True)

    # Clasificaci√≥n por criticidad y permisos
    st.subheader("üìä Resumen por Criticidad del M√≥dulo")
    resumen_criticidad = df_conflictos.groupby(['Usuario', 'Criticidad_M√≥dulo'])['M√≥dulo'].count().reset_index()
    st.dataframe(resumen_criticidad, use_container_width=True)

    # Recomendaciones autom√°ticas
    st.subheader("üìù Recomendaciones del Auditor")
    if total_conflictos > 0:
        st.warning("Se detectaron usuarios con acceso simult√°neo a Compras y Tesorer√≠a. Se recomienda revisar y segregar funciones.")
        st.info("Priorizar la revocaci√≥n de accesos con criticidad Alta y permisos de 'Total' o 'Aprobaci√≥n'.")
    else:
        st.success("No se detectaron accesos conflictivos. Mantener la pol√≠tica de segregaci√≥n de funciones.")

    # Descargar informe
    def to_excel(dataframe):
        output = BytesIO()
        with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
            dataframe.to_excel(writer, index=False, sheet_name="Conflictos")
        return output.getvalue()

    st.download_button(
        label="üì• Descargar Informe de Conflictos",
        data=to_excel(df_conflictos),
        file_name="Informe_Caat2.xlsx",
        mime="application/vnd.openxmlformats-officedocument.spreadsheetml.sheet"
    )

else:
    st.info("Por favor carga un archivo Excel o CSV para iniciar el an√°lisis.")
